#!/usr/bin/bash

export PATH="$PATH:$HOME/.cargo/bin:\
$HOME/.local/bin:\
$HOME/.local/scripts:\
$HOME/.local/nvim-linux64/bin"

# vim/nvim
if command -v nvim &>/dev/null; then
    export EDITOR=nvim
    alias \
        vi="nvim" \
        vh="cd ~/.config/nvim"
elif command -v vim &>/dev/null; then
    export EDITOR=vim
    alias \
        vi="vim" \
        vh="cd ~/.vim"
fi
alias vit="vi /tmp/tmp.md"
alias vidiff="vi -d"

# bat
if command -v bat &> /dev/null; then
    alias \
        vat="bat" \
        cat="bat --style=plain" \
        bathelp='bat --plain --language=help' \
        sat="bat --paging=never --style=plain" \
        gat="bat --style=changes" \
        aat="bat -A" \
        less="cat" \
        bfzf="fzf" \
        fzf='fzf --preview "bat --color=always --style=numbers --line-range=:500 {}"'
    export PAGER="bat --plain"
fi
tlr() { tldr "$1" | bat --plain -l="md"; }
bh() { "$@" --help 2>&1 | bathelp; }


if command -v eza &> /dev/null; then
    alias \
        els="bls -hN --color=auto --group-directories-first" \
        l='eza --group-directories-first' \
        ls="l -F" \
        ls1="ls -1" \
        la='l -a' \
        ll='l -l' \
        lal='l -al' \
        tree='eza --tree'
else
    alias \
        l="ls -hN --color=auto --group-directories-first" \
        ls='l -CF' \
        ls1="ls -1" \
        la='l -A' \
        ll='l -l' \
        lal='l -Al'
fi
pree() { tree "$1" | cat; }

# git
qcom() {
    if [ -z "$1" ]; then
        git add . && git commit -m 'automated quick commit'
    else
        git add . && git commit -m "$1"
    fi
}
qcomp() {
    qcom "$@" && git push || \
        git  push --set-upstream origin "$(git rev-parse --abbrev-ref HEAD)";
};
alias \
    gt="git status" \
    gp="git pull" \
    gd="git diff" \
    gr="git restore" \
    gg="git grep" \
    gcm="git commit" \
    gclean="git clean -fdx"

# apt
lill () {
  for prog in "${@}"; do
    if ! command -v "${prog}" &>/dev/null; then
      echo "Installing ${prog}"...
      sudo apt-get install -y "${prog}"
    fi
  done
}
alias apt="apt-get" \
    whichv="apt-cache policy"


# trash
if command -v trash &> /dev/null; then
    alias rm="trash"
else
    alias rm="rm -I"; alias vrm="rm -Iv"
fi

# yt-dlp
alias \
    yt="yt-dlp  -i -o '%(title)s.%(ext)s'" \
    yts="yt-dlp --embed-subs -i -o '%(title)s.%(ext)s'" \
    yta="yt -x -f bestaudio/best --audio-format mp3"
ytq() {
    [ -z "$2" ] && QUAL="1080" || QUAL=$2
    yt -f "bv*[height<=${QUAL}]+ba/b[height<=${QUAL}] / wv*+ba/w" "$1"
}

unarchive() {
    case "$1" in
        *.zip) unzip "$1" ;;
        *.tar.gz) tar -xzvf "$1" ;;
        *.tar.bz2) tar -xjvf "$1" ;;
        *.tar) tar -xvf "$1" ;;
        *.xz) xz -z "$1" ;;
        *) echo "Unsupported format" ;;
    esac
}

# sane defaults, i.e. colors and verbosity
alias \
    grep='grep --color=auto' \
    fgrep='fgrep --color=auto' \
    egrep='egrep --color=auto' \
    ip="ip -color=auto" \
    diff="diff --color=auto" \
    mv="mv -i" \
    rsync="rsync -vrPlu" \
    cp="cp -i" \
    ffmpeg="ffmpeg -hide_banner" \
    bc="bc -ql"

# shortcuts
#
update_all() {
    echo -n -e "\n>APT\n"
    sudo apt-get update
    sudo apt-get upgrade -y --allow-downgrades
    echo -n -e "\n>PIP(X)\n"
    pipx upgrade-all || pip upgrade-all
    echo -n -e "\n>CARGO\n"
    cargo install-update -a
    if command -v fwupdmgr &>/dev/null; then
        echo -n -e "\n>FWUPDMGR\n"
        sudo fwupdmgr refresh
        sudo fwupdmgr get-updates
        sudo fwupdmgr update
    fi
}
ct() { python3 <(echo "import random; ct=random.randint(0,1); s='heads' if ct else 'tails'; print(s)"); }
qm() { python3 <(echo "print($@)"); }
ts() { trans "$@" | less; }
cht() { curl cheat.sh/"$1" | less; }
dock() { docker start "$1" &> /dev/null ; docker attach "$1"; }

alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error) $(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'
alias \
    c="xclip" \
    v="xclip -o" \
    xc="xclip -selection clipboard"
alias \
    ua="update_all" \
    myip="curl ipinfo.io/ip" \
    xo="xdg-open" \
    hdi="howdoi" \
    kas="tmux kill-ses -a"
alias \
    resh="[[ \$0 == *"zsh"* ]] && source ~/.zshrc || source ~/.bashrc" \
    shrc="[[ \$0 == *"zsh"* ]] && \${EDITOR} ~/.zshrc || \${EDITOR} ~/.bashrc" \
    aliasrc="\${EDITOR} ~/.config/aliasrc" \
    locrc="\${EDITOR} ~/.config/localshrc"
alias \
    vivi="vi ~/notes/keymaps/vi.md" \
    visu="vi ~/notes/keymaps/su.md"
alias \
    sshkg="ssh-keygen -t ed25519" \
    sshag='eval $(ssh-agent) && ssh-add'


# development-specific
qcr() { gcc "$@" -o tmp.out && ./tmp.out ; rm tmp.out > /dev/null; };
p4u() {
    n=$1; shift;
    [ -z "$1" ] && usage_mesg="usage: 'p4u <n> <flags>' where <n> - ttyUSB<N>"
    picocom -b 115200 "/dev/ttyUSB${n}" "$@" || echo $usage_mesg
}
p4a() { picocom -b 115200 "/dev/ttyACM${1}"; }
alias \
    make="make -j\$((\$(nproc) - 2))" \
    p3="python3" \
    sven="source venv/bin/activate"

# remap caps lock and escape on tty sessions
caps2esc() {
    echo -e "keycode 1 = Caps_Lock \nkeycode 58 = Escape" > /tmp/caps2esc
    sudo loadkeys /tmp/caps2esc
}
back2caps() {
    echo -e "keycode 58 = Caps_Lock \nkeycode 1 = Escape" > /tmp/back2caps
    sudo loadkeys /tmp/back2caps
}

lfip() { kitty _lfip "$@"; }
lfcd() { cd "$(command lf -print-last-dir "$@")" || exit; }
command -v zoxide &> /dev/null && alias cd="z" cdf="zi"

# tokyonight-night theme for fzf
export FZF_DEFAULT_OPTS="$FZF_DEFAULT_OPTS \
--color=fg+:#c0caf5,bg+:#292e42,hl+:#ff9e64 \
--color=info:#7aa2f7,prompt:#7dcfff,pointer:#7dcfff \
--color=marker:#9ece6a,spinner:#9ece6a,header:#9ece6a"

export HOWDOI_SEARCH_ENGINE=duckduckgo
